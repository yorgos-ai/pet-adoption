name: CI Tests
on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install Poetry
  #       run: pip install poetry

  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.10

  #     - name: Setup Poetry
  #       run: |
  #         pip install poetry
  #         poetry config virtualenvs.create true
  #         poetry config virtualenvs.in-project true

  #     - name: Install dependencies from cache
  #       id: poetry-cache
  #       uses: actions/cache@v3
  #       with:
  #         path: .venv
  #         key: poetry-ci-dependencies-${{ hashFiles('**/poetry.lock') }}

  #     - name: Install dependencies
  #       run: poetry install --no-interaction --no-root
  #       if: steps.poetry-cache.outputs.cache-hit != 'true'


  code-linting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Poetry
        run: pip install poetry

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies from cache
        id: poetry-cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-ci-dependencies-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.poetry-cache.outputs.cache-hit != 'true'

      - name: Code linting
        run: poetry run ruff check .

  unit-tests:
    runs-on: ubuntu-latest
    needs:
      - code-linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Poetry
        run: pip install poetry

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies from cache
        id: poetry-cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: poetry-ci-dependencies-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root
        if: steps.poetry-cache.outputs.cache-hit != 'true'

      - name: Run unit tests
        run: poetry run pytest -v --cov-report term --cov=pet_adoption tests/
